{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/saman/OneDrive/Desktop/OnlineStore/shop/src/app/lib/mongodb.js"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst uri = process.env.MONGODB_URI;\r\n\r\nif (!uri) {\r\n  throw new Error('Please define MONGODB_URI in .env.local');\r\n}\r\n\r\nlet cached = global.mongoose;\r\n\r\nif (!cached) {\r\n  cached = global.mongoose = { conn: null, promise: null };\r\n}\r\n\r\nasync function connectToDatabase() {\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    cached.promise = mongoose.connect(uri, {\r\n      dbName: 'SamanOnlineShop',\r\n      useNewUrlParser: true,\r\n      useUnifiedTopology: true,\r\n    }).then(mongoose => {\r\n      console.log('Connected to MongoDB Atlas');\r\n      return mongoose;\r\n    });\r\n  }\r\n  cached.conn = await cached.promise;\r\n  return cached.conn;\r\n}\r\n\r\nexport default connectToDatabase;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AAEnC,IAAI,CAAC,KAAK;IACR,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,KAAK;YACrC,QAAQ;YACR,iBAAiB;YACjB,oBAAoB;QACtB,GAAG,IAAI,CAAC,CAAA;YACN,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT;IACF;IACA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB;uCAEe","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/saman/OneDrive/Desktop/OnlineStore/shop/src/app/models/product.js"],"sourcesContent":["import { Schema, model, models } from 'mongoose';\r\n\r\nconst productSchema = new Schema({\r\n    id: {\r\n        type: Number,\r\n        required: true,\r\n        unique: true\r\n    },\r\n    name: {\r\n        type: String,\r\n        required: [true, 'نام محصول الزامی است'],\r\n        trim: true\r\n    },\r\n    price: {\r\n        type: Number,\r\n        required: [true, 'قیمت محصول الزامی است'],\r\n        min: [0, 'قیمت نمی‌تواند منفی باشد']\r\n    },\r\n    originalPrice: {\r\n        type: Number,\r\n        min: [0, 'قیمت اصلی نمی‌تواند منفی باشد']\r\n    },\r\n    discount: {\r\n        type: Number,\r\n        min: [0, 'تخفیف نمی‌تواند منفی باشد'],\r\n        max: [100, 'تخفیف نمی‌تواند بیشتر از ۱۰۰ باشد']\r\n    },\r\n    rating: {\r\n        type: Number,\r\n        default: 0,\r\n        min: [0, 'امتیاز نمی‌تواند منفی باشد'],\r\n        max: [5, 'حداکثر امتیاز ۵ است']\r\n    },\r\n    reviews: {\r\n        type: Number,\r\n        default: 0,\r\n        min: [0, 'تعداد نظرات نمی‌تواند منفی باشد']\r\n    },\r\n    imageUrl: {\r\n        type: String,\r\n        required: [true, 'تصویر محصول الزامی است']\r\n    },\r\n    description: {\r\n        type: String,\r\n        required: [true, 'توضیحات محصول الزامی است']\r\n    },\r\n    category: {\r\n        type: String,\r\n        required: [true, 'دسته‌بندی محصول الزامی است']\r\n    },\r\n    stock: {\r\n        type: Number,\r\n        required: true,\r\n        default: 0,\r\n        min: [0, 'موجودی نمی‌تواند منفی باشد']\r\n    },\r\n    isBestSeller: {\r\n        type: Boolean,\r\n        default: false\r\n    },\r\n    createdAt: {\r\n        type: Date,\r\n        default: Date.now\r\n    }\r\n}, {\r\n    timestamps: true,\r\n    toJSON: {\r\n        transform: function(doc, ret) {\r\n            ret.id = doc.id;\r\n            delete ret._id;\r\n            delete ret.__v;\r\n            return ret;\r\n        }\r\n    }\r\n});\r\n\r\n// Add a pre-save hook to generate numeric ID if not provided\r\nproductSchema.pre('save', async function(next) {\r\n    if (!this.id) {\r\n        // Find the highest id and increment by 1\r\n        const highestProduct = await this.constructor.findOne().sort('-id');\r\n        this.id = highestProduct ? highestProduct.id + 1 : 1;\r\n    }\r\n    next();\r\n});\r\n\r\nconst Product = models.Product || model('Product', productSchema);\r\n\r\nexport default Product;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,gBAAgB,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC7B,IAAI;QACA,MAAM;QACN,UAAU;QACV,QAAQ;IACZ;IACA,MAAM;QACF,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;QACxC,MAAM;IACV;IACA,OAAO;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAAwB;QACzC,KAAK;YAAC;YAAG;SAA2B;IACxC;IACA,eAAe;QACX,MAAM;QACN,KAAK;YAAC;YAAG;SAAgC;IAC7C;IACA,UAAU;QACN,MAAM;QACN,KAAK;YAAC;YAAG;SAA4B;QACrC,KAAK;YAAC;YAAK;SAAoC;IACnD;IACA,QAAQ;QACJ,MAAM;QACN,SAAS;QACT,KAAK;YAAC;YAAG;SAA6B;QACtC,KAAK;YAAC;YAAG;SAAsB;IACnC;IACA,SAAS;QACL,MAAM;QACN,SAAS;QACT,KAAK;YAAC;YAAG;SAAkC;IAC/C;IACA,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAAyB;IAC9C;IACA,aAAa;QACT,MAAM;QACN,UAAU;YAAC;YAAM;SAA2B;IAChD;IACA,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAA6B;IAClD;IACA,OAAO;QACH,MAAM;QACN,UAAU;QACV,SAAS;QACT,KAAK;YAAC;YAAG;SAA6B;IAC1C;IACA,cAAc;QACV,MAAM;QACN,SAAS;IACb;IACA,WAAW;QACP,MAAM;QACN,SAAS,KAAK,GAAG;IACrB;AACJ,GAAG;IACC,YAAY;IACZ,QAAQ;QACJ,WAAW,SAAS,GAAG,EAAE,GAAG;YACxB,IAAI,EAAE,GAAG,IAAI,EAAE;YACf,OAAO,IAAI,GAAG;YACd,OAAO,IAAI,GAAG;YACd,OAAO;QACX;IACJ;AACJ;AAEA,6DAA6D;AAC7D,cAAc,GAAG,CAAC,QAAQ,eAAe,IAAI;IACzC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;QACV,yCAAyC;QACzC,MAAM,iBAAiB,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,GAAG,IAAI,CAAC;QAC7D,IAAI,CAAC,EAAE,GAAG,iBAAiB,eAAe,EAAE,GAAG,IAAI;IACvD;IACA;AACJ;AAEA,MAAM,UAAU,yGAAA,CAAA,SAAM,CAAC,OAAO,IAAI,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAE,WAAW;uCAEpC","debugId":null}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/saman/OneDrive/Desktop/OnlineStore/shop/src/app/api/products/route.js"],"sourcesContent":["import connectToDatabase from '../../lib/mongodb'\r\nimport Product from '../../models/product'\r\n\r\nexport async function GET(request) {\r\n  try {\r\n    await connectToDatabase()\r\n    \r\n    const { searchParams } = new URL(request.url)\r\n    const bestSellers = searchParams.get('bestSellers')\r\n    \r\n    const query = bestSellers === 'true' ? { isBestSeller: true } : {}\r\n    \r\n    const products = await Product.find(query).limit(10)\r\n    \r\n    return Response.json(products)\r\n  } catch (error) {\r\n    return Response.json(\r\n      { error: error.message },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAO;IAC/B,IAAI;QACF,MAAM,CAAA,GAAA,8HAAA,CAAA,UAAiB,AAAD;QAEtB,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,cAAc,aAAa,GAAG,CAAC;QAErC,MAAM,QAAQ,gBAAgB,SAAS;YAAE,cAAc;QAAK,IAAI,CAAC;QAEjE,MAAM,WAAW,MAAM,iIAAA,CAAA,UAAO,CAAC,IAAI,CAAC,OAAO,KAAK,CAAC;QAEjD,OAAO,SAAS,IAAI,CAAC;IACvB,EAAE,OAAO,OAAO;QACd,OAAO,SAAS,IAAI,CAClB;YAAE,OAAO,MAAM,OAAO;QAAC,GACvB;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}