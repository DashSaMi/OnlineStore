{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/saman/OneDrive/Desktop/OnlineStore/dashboard/src/app/dashboard/orders/%5Bid%5D/components/OrderDetail.js/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/orders/[id]/components/OrderDetail.js <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/orders/[id]/components/OrderDetail.js <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2T,GACxV,yFACA","debugId":null}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/saman/OneDrive/Desktop/OnlineStore/dashboard/src/app/dashboard/orders/%5Bid%5D/components/OrderDetail.js/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/orders/[id]/components/OrderDetail.js from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/orders/[id]/components/OrderDetail.js\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuS,GACpU,qEACA","debugId":null}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/saman/OneDrive/Desktop/OnlineStore/dashboard/src/lib/mongodb.js"],"sourcesContent":["import { MongoClient } from 'mongodb';\r\n\r\nconst uri = process.env.MONGODB_URI;\r\nconst defaultDbName = process.env.MONGODB_DB_NAME || 'SamanOnlineShop';\r\n\r\nconst options = {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n  maxPoolSize: 10,               // Max number of connections in pool\r\n  socketTimeoutMS: 30000,        // Close sockets after 30 seconds of inactivity\r\n  serverSelectionTimeoutMS: 5000,// Try to send operations for 5 seconds\r\n  connectTimeoutMS: 10000,       // Give up initial connection after 10 seconds\r\n};\r\n\r\n// Validate environment variables\r\nif (!uri) {\r\n  throw new Error('MongoDB URI is not defined. Please add MONGODB_URI to .env.local');\r\n}\r\n\r\n// Global clientPromise to maintain connection during development HMR\r\nlet clientPromise;\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  if (!global._mongoClientPromise) {\r\n    const client = new MongoClient(uri, options);\r\n    global._mongoClientPromise = client.connect()\r\n      .then(() => {\r\n        console.log('MongoDB connected successfully');\r\n        return client;\r\n      })\r\n      .catch(err => {\r\n        console.error('MongoDB connection error:', err);\r\n        throw err;\r\n      });\r\n  }\r\n  clientPromise = global._mongoClientPromise;\r\n} else {\r\n  // Production - new client for each deploy/run\r\n  const client = new MongoClient(uri, options);\r\n  clientPromise = client.connect()\r\n    .then(() => {\r\n      console.log('MongoDB connected successfully');\r\n      return client;\r\n    })\r\n    .catch(err => {\r\n      console.error('MongoDB connection error:', err);\r\n      throw err;\r\n    });\r\n}\r\n\r\n/**\r\n * Get a MongoDB database instance\r\n * @param {string} [dbName] - Optional database name (defaults to MONGODB_DB_NAME or 'SamanOnlineShop')\r\n * @returns {Promise<{client: MongoClient, db: Db}>} Returns both client and db for flexibility\r\n */\r\nexport async function getDatabase(dbName = defaultDbName) {\r\n  try {\r\n    const client = await clientPromise;\r\n    const db = client.db(dbName);\r\n\r\n    // Ping database to verify connection is alive\r\n    await db.command({ ping: 1 });\r\n\r\n    return { client, db };\r\n  } catch (error) {\r\n    console.error('Failed to get database instance:', error);\r\n    throw new Error('Database connection failed');\r\n  }\r\n}\r\n\r\n// Graceful shutdown handler for Node process termination\r\nprocess.on('SIGINT', async () => {\r\n  try {\r\n    const client = await clientPromise;\r\n    await client.close();\r\n    console.log('MongoDB connection closed through app termination');\r\n    process.exit(0);\r\n  } catch (err) {\r\n    console.error('Failed to close MongoDB connection:', err);\r\n    process.exit(1);\r\n  }\r\n});\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,gBAAgB,QAAQ,GAAG,CAAC,eAAe,IAAI;AAErD,MAAM,UAAU;IACd,iBAAiB;IACjB,oBAAoB;IACpB,aAAa;IACb,iBAAiB;IACjB,0BAA0B;IAC1B,kBAAkB;AACpB;AAEA,iCAAiC;AACjC,IAAI,CAAC,KAAK;IACR,MAAM,IAAI,MAAM;AAClB;AAEA,qEAAqE;AACrE,IAAI;AAEJ,wCAA4C;IAC1C,IAAI,CAAC,4CAAO,mBAAmB,EAAE;QAC/B,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QACpC,4CAAO,mBAAmB,GAAG,OAAO,OAAO,GACxC,IAAI,CAAC;YACJ,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT,GACC,KAAK,CAAC,CAAA;YACL,QAAQ,KAAK,CAAC,6BAA6B;YAC3C,MAAM;QACR;IACJ;IACA,gBAAgB,4CAAO,mBAAmB;AAC5C;;AAmBO,eAAe,YAAY,SAAS,aAAa;IACtD,IAAI;QACF,MAAM,SAAS,MAAM;QACrB,MAAM,KAAK,OAAO,EAAE,CAAC;QAErB,8CAA8C;QAC9C,MAAM,GAAG,OAAO,CAAC;YAAE,MAAM;QAAE;QAE3B,OAAO;YAAE;YAAQ;QAAG;IACtB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAClD,MAAM,IAAI,MAAM;IAClB;AACF;AAEA,yDAAyD;AACzD,QAAQ,EAAE,CAAC,UAAU;IACnB,IAAI;QACF,MAAM,SAAS,MAAM;QACrB,MAAM,OAAO,KAAK;QAClB,QAAQ,GAAG,CAAC;QACZ,QAAQ,IAAI,CAAC;IACf,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,uCAAuC;QACrD,QAAQ,IAAI,CAAC;IACf;AACF","debugId":null}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/saman/OneDrive/Desktop/OnlineStore/dashboard/src/app/dashboard/orders/%5Bid%5D/actions.js"],"sourcesContent":["// Add this to: app/dashboard/orders/[id]/actions.js\r\n\r\nimport { getDatabase } from '@/lib/mongodb';\r\nimport { ObjectId } from 'mongodb';\r\n\r\nexport async function updateOrderStatus(id, newStatus) {\r\n  try {\r\n    if (!ObjectId.isValid(id)) throw new Error('Invalid order ID');\r\n\r\n    const { db } = await getDatabase();\r\n    const result = await db.collection('orders').updateOne(\r\n      { _id: new ObjectId(id) },\r\n      {\r\n        $set: {\r\n          status: newStatus,\r\n          updatedAt: new Date(),\r\n        },\r\n      }\r\n    );\r\n\r\n    if (result.modifiedCount === 0) throw new Error('Order status not updated');\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('[updateOrderStatus] Error:', error);\r\n    return { success: false, message: error.message };\r\n  }\r\n}"],"names":[],"mappings":"AAAA,oDAAoD;;;;AAEpD;AACA;;;AAEO,eAAe,kBAAkB,EAAE,EAAE,SAAS;IACnD,IAAI;QACF,IAAI,CAAC,uGAAA,CAAA,WAAQ,CAAC,OAAO,CAAC,KAAK,MAAM,IAAI,MAAM;QAE3C,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,CAAA,GAAA,qHAAA,CAAA,cAAW,AAAD;QAC/B,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,UAAU,SAAS,CACpD;YAAE,KAAK,IAAI,uGAAA,CAAA,WAAQ,CAAC;QAAI,GACxB;YACE,MAAM;gBACJ,QAAQ;gBACR,WAAW,IAAI;YACjB;QACF;QAGF,IAAI,OAAO,aAAa,KAAK,GAAG,MAAM,IAAI,MAAM;QAChD,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;YAAE,SAAS;YAAO,SAAS,MAAM,OAAO;QAAC;IAClD;AACF","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/saman/OneDrive/Desktop/OnlineStore/dashboard/src/app/dashboard/orders/%5Bid%5D/page.js"],"sourcesContent":["//app/dashboard/orders/[id]/page.js\r\nimport OrderDetail from './components/OrderDetail';\r\nimport { fetchAdminOrderById } from './actions';\r\n\r\nexport default async function OrderDetailPage({ params }) {\r\n  const { id } = params;\r\n\r\n  try {\r\n    const order = await fetchAdminOrderById(id);\r\n\r\n    return (\r\n      <div className=\"p-4\">\r\n        <h1 className=\"text-2xl font-bold mb-4\">Order #{order._id}</h1>\r\n        <OrderDetail order={order} />\r\n      </div>\r\n    );\r\n  } catch (error) {\r\n    return (\r\n      <div className=\"p-4 text-red-600\">\r\n        Error loading order: {error.message}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,mCAAmC;;;;;AACnC;AACA;;;;AAEe,eAAe,gBAAgB,EAAE,MAAM,EAAE;IACtD,MAAM,EAAE,EAAE,EAAE,GAAG;IAEf,IAAI;QACF,MAAM,QAAQ,MAAM,CAAA,GAAA,sJAAA,CAAA,sBAAmB,AAAD,EAAE;QAExC,qBACE,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAG,WAAU;;wBAA0B;wBAAQ,MAAM,GAAG;;;;;;;8BACzD,8OAAC,wKAAA,CAAA,UAAW;oBAAC,OAAO;;;;;;;;;;;;IAG1B,EAAE,OAAO,OAAO;QACd,qBACE,8OAAC;YAAI,WAAU;;gBAAmB;gBACV,MAAM,OAAO;;;;;;;IAGzC;AACF","debugId":null}}]
}