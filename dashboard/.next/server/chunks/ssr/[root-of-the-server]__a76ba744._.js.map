{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/saman/OneDrive/Desktop/OnlineStore/dashboard/src/lib/mongodb.js"],"sourcesContent":["import { MongoClient } from 'mongodb';\r\n\r\nconst uri = process.env.MONGODB_URI;\r\nconst defaultDbName = process.env.MONGODB_DB_NAME || 'SamanOnlineShop';\r\n\r\nconst options = {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n  maxPoolSize: 10,               // Max number of connections in pool\r\n  socketTimeoutMS: 30000,        // Close sockets after 30 seconds of inactivity\r\n  serverSelectionTimeoutMS: 5000,// Try to send operations for 5 seconds\r\n  connectTimeoutMS: 10000,       // Give up initial connection after 10 seconds\r\n};\r\n\r\n// Validate environment variables\r\nif (!uri) {\r\n  throw new Error('MongoDB URI is not defined. Please add MONGODB_URI to .env.local');\r\n}\r\n\r\n// Global clientPromise to maintain connection during development HMR\r\nlet clientPromise;\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  if (!global._mongoClientPromise) {\r\n    const client = new MongoClient(uri, options);\r\n    global._mongoClientPromise = client.connect()\r\n      .then(() => {\r\n        console.log('MongoDB connected successfully');\r\n        return client;\r\n      })\r\n      .catch(err => {\r\n        console.error('MongoDB connection error:', err);\r\n        throw err;\r\n      });\r\n  }\r\n  clientPromise = global._mongoClientPromise;\r\n} else {\r\n  // Production - new client for each deploy/run\r\n  const client = new MongoClient(uri, options);\r\n  clientPromise = client.connect()\r\n    .then(() => {\r\n      console.log('MongoDB connected successfully');\r\n      return client;\r\n    })\r\n    .catch(err => {\r\n      console.error('MongoDB connection error:', err);\r\n      throw err;\r\n    });\r\n}\r\n\r\n/**\r\n * Get a MongoDB database instance\r\n * @param {string} [dbName] - Optional database name (defaults to MONGODB_DB_NAME or 'SamanOnlineShop')\r\n * @returns {Promise<{client: MongoClient, db: Db}>} Returns both client and db for flexibility\r\n */\r\nexport async function getDatabase(dbName = defaultDbName) {\r\n  try {\r\n    const client = await clientPromise;\r\n    const db = client.db(dbName);\r\n\r\n    // Ping database to verify connection is alive\r\n    await db.command({ ping: 1 });\r\n\r\n    return { client, db };\r\n  } catch (error) {\r\n    console.error('Failed to get database instance:', error);\r\n    throw new Error('Database connection failed');\r\n  }\r\n}\r\n\r\n// Graceful shutdown handler for Node process termination\r\nprocess.on('SIGINT', async () => {\r\n  try {\r\n    const client = await clientPromise;\r\n    await client.close();\r\n    console.log('MongoDB connection closed through app termination');\r\n    process.exit(0);\r\n  } catch (err) {\r\n    console.error('Failed to close MongoDB connection:', err);\r\n    process.exit(1);\r\n  }\r\n});\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,gBAAgB,QAAQ,GAAG,CAAC,eAAe,IAAI;AAErD,MAAM,UAAU;IACd,iBAAiB;IACjB,oBAAoB;IACpB,aAAa;IACb,iBAAiB;IACjB,0BAA0B;IAC1B,kBAAkB;AACpB;AAEA,iCAAiC;AACjC,IAAI,CAAC,KAAK;IACR,MAAM,IAAI,MAAM;AAClB;AAEA,qEAAqE;AACrE,IAAI;AAEJ,wCAA4C;IAC1C,IAAI,CAAC,4CAAO,mBAAmB,EAAE;QAC/B,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QACpC,4CAAO,mBAAmB,GAAG,OAAO,OAAO,GACxC,IAAI,CAAC;YACJ,QAAQ,GAAG,CAAC;YACZ,OAAO;QACT,GACC,KAAK,CAAC,CAAA;YACL,QAAQ,KAAK,CAAC,6BAA6B;YAC3C,MAAM;QACR;IACJ;IACA,gBAAgB,4CAAO,mBAAmB;AAC5C;;AAmBO,eAAe,YAAY,SAAS,aAAa;IACtD,IAAI;QACF,MAAM,SAAS,MAAM;QACrB,MAAM,KAAK,OAAO,EAAE,CAAC;QAErB,8CAA8C;QAC9C,MAAM,GAAG,OAAO,CAAC;YAAE,MAAM;QAAE;QAE3B,OAAO;YAAE;YAAQ;QAAG;IACtB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAClD,MAAM,IAAI,MAAM;IAClB;AACF;AAEA,yDAAyD;AACzD,QAAQ,EAAE,CAAC,UAAU;IACnB,IAAI;QACF,MAAM,SAAS,MAAM;QACrB,MAAM,OAAO,KAAK;QAClB,QAAQ,GAAG,CAAC;QACZ,QAAQ,IAAI,CAAC;IACf,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,uCAAuC;QACrD,QAAQ,IAAI,CAAC;IACf;AACF","debugId":null}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/saman/OneDrive/Desktop/OnlineStore/dashboard/src/app/dashboard/users/page.js"],"sourcesContent":["import { getDatabase } from '@/lib/mongodb';\r\n\r\nexport default async function UsersPage() {\r\n  let users = [];\r\n  let error = null;\r\n  try {\r\n    const { db } = await getDatabase();\r\n    users = await db.collection('users').find({}).toArray();\r\n  } catch (err) {\r\n    error = err.message;\r\n  }\r\n\r\n  return (\r\n    <div className=\"py-8\">\r\n      <h1 className=\"text-3xl font-bold mb-8 text-gray-900\">All Users</h1>\r\n      {error ? (\r\n        <div className=\"p-4 text-red-600\">Error: {error}</div>\r\n      ) : users.length === 0 ? (\r\n        <div className=\"text-gray-600\">No users found.</div>\r\n      ) : (\r\n        <div className=\"overflow-x-auto bg-white shadow rounded-lg\">\r\n          <table className=\"min-w-full divide-y divide-gray-200\">\r\n            <thead className=\"bg-gray-50\">\r\n              <tr>\r\n                <th className=\"px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider\">ID</th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider\">Name</th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider\">Email</th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider\">Role</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white divide-y divide-gray-100\">\r\n              {users.map(user => (\r\n                <tr key={user._id.toString()} className=\"hover:bg-gray-50 transition\">\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{user._id.toString()}</td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-700\">{user.name || `${user.firstName || ''} ${user.lastName || ''}`}</td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-700\">{user.email}</td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-700\">{user.role || 'user'}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAAA;;;AAEe,eAAe;IAC5B,IAAI,QAAQ,EAAE;IACd,IAAI,QAAQ;IACZ,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,CAAA,GAAA,qHAAA,CAAA,cAAW,AAAD;QAC/B,QAAQ,MAAM,GAAG,UAAU,CAAC,SAAS,IAAI,CAAC,CAAC,GAAG,OAAO;IACvD,EAAE,OAAO,KAAK;QACZ,QAAQ,IAAI,OAAO;IACrB;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAAwC;;;;;;YACrD,sBACC,8OAAC;gBAAI,WAAU;;oBAAmB;oBAAQ;;;;;;uBACxC,MAAM,MAAM,KAAK,kBACnB,8OAAC;gBAAI,WAAU;0BAAgB;;;;;qCAE/B,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAM,WAAU;;sCACf,8OAAC;4BAAM,WAAU;sCACf,cAAA,8OAAC;;kDACC,8OAAC;wCAAG,WAAU;kDAAmF;;;;;;kDACjG,8OAAC;wCAAG,WAAU;kDAAmF;;;;;;kDACjG,8OAAC;wCAAG,WAAU;kDAAmF;;;;;;kDACjG,8OAAC;wCAAG,WAAU;kDAAmF;;;;;;;;;;;;;;;;;sCAGrG,8OAAC;4BAAM,WAAU;sCACd,MAAM,GAAG,CAAC,CAAA,qBACT,8OAAC;oCAA6B,WAAU;;sDACtC,8OAAC;4CAAG,WAAU;sDAAqD,KAAK,GAAG,CAAC,QAAQ;;;;;;sDACpF,8OAAC;4CAAG,WAAU;sDAAqD,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,IAAI,GAAG,CAAC,EAAE,KAAK,QAAQ,IAAI,IAAI;;;;;;sDAChI,8OAAC;4CAAG,WAAU;sDAAqD,KAAK,KAAK;;;;;;sDAC7E,8OAAC;4CAAG,WAAU;sDAAqD,KAAK,IAAI,IAAI;;;;;;;mCAJzE,KAAK,GAAG,CAAC,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;AAa1C","debugId":null}}]
}